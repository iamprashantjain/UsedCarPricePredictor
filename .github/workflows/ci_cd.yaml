name: CI/CD Pipeline

on:
  push:

jobs:
  project-ci-cd:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements_dev.txt

    - name: Install DVC and Dagshub
      run: pip install dvc[s3] dagshub

    - name: Pull data from DVC remote (S3)
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: |
        dvc pull --force
        ls artifacts/data_ingestion/

    - name: Run DVC pipeline
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: dvc repro

    - name: Run model tests
      env:
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: python -m unittest tests/test_model.py

    - name: Promote model to Production
      if: success()
      env:
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: python src/components/promote_model.py



# ======================== After above ========================
# create fastapi which fetches model from model registry & do predictions
# dockerize the app and test locally
# if success: then add ci: login ecr, build image, tag & push (show push commands)
# ecr repo name is prashant-mlops-ecr


    - name: Login to AWS ECR
      if: success()
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 739275446561.dkr.ecr.ap-south-1.amazonaws.com

    - name: Build Docker image
      if: success()
      run: |
        docker build -t prashant-mlops-ecr .

    - name: Tag Docker image
      if: success()
      run: |
        docker tag prashant-mlops-ecr:latest 739275446561.dkr.ecr.ap-south-1.amazonaws.com/prashant-mlops-ecr:latest

    - name: Push Docker image to AWS ECR
      if: success()
      run: |
        docker push 739275446561.dkr.ecr.ap-south-1.amazonaws.com/prashant-mlops-ecr:latest



    # Zip the required files
    - name: Zip files for deployment
      if: success()
      run: |
        zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh


    # Upload the ZIP file to S3
    - name: Upload ZIP to S3
      if: success()
      run: |
        aws s3 cp deployment.zip s3://prashant-mlops-bucket/deployment.zip


    # create a deployment under a deployment group in AWS CodeDeploy -- No need to create deployment from AWS UI manually
    - name: Deploy to AWS CodeDeploy
      if: success()
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws deploy create-deployment \
          --application-name UsedCarPricePredcitor3Aug \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name UsedCarPricePredcitor3AugDeploymentGroup \
          --s3-location bucket=prashant-mlops-bucket,key=deployment.zip,bundleType=zip \
          --file-exists-behavior OVERWRITE \
          --region ap-south-1
        