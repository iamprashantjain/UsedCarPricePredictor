name: CI/CD Pipeline

on:
  push:

jobs:
  project-ci-cd:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements_dev.txt

    - name: Install DVC and Dagshub
      run: pip install dvc[s3] dagshub

    - name: Pull data from DVC remote (S3)
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: |
        dvc pull --force
        ls artifacts/data_ingestion/

    - name: Run DVC pipeline
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: dvc repro

    - name: Run model tests
      env:
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: python -m unittest tests/test_model.py

    - name: Promote model to Production
      if: success()
      env:
        DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      run: python src/components/promote_model.py



# ======================== After above ========================
# create fastapi which fetches model from model registry & do predictions
# dockerize the app and test locally
# add docker image creation & push image to ECR step in CI below




